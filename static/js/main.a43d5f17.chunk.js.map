{"version":3,"sources":["styles.js","index.js","App.js"],"names":["GlobalStyle","createGlobalStyle","Container","styled","div","Title","SearchBox","Input","input","Image","img","List","ReactDOM","render","useState","repositories","setRepositories","user","setUser","message","setMessage","avatar","setAvatar","handleFavorites","id","newRepositories","map","repo","favorite","useEffect","a","fetch","response","status","json","data","avatar_url","getAvatar","getRepositories","filtered","filter","document","title","length","onChange","e","target","value","placeholder","src","key","href","html_url","name","role","aria-label","onClick","style","cursor","getElementById"],"mappings":"gyDAEO,IAAMA,EAAcC,YAAH,KAkBXC,EAAYC,IAAOC,IAAV,KAOTC,EAAQF,IAAOC,IAAV,KAcLE,EAAYH,IAAOC,IAAV,KAUTG,EAAQJ,IAAOK,MAAV,KAMLC,EAAQN,IAAOO,IAAV,KAMLC,EAAOR,IAAOC,IAAV,K,yjBC1DjBQ,IAASC,OACP,oCACE,mBCHW,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACrBC,EADqB,KACPC,EADO,OAEJF,mBAAS,IAFL,mBAErBG,EAFqB,KAEfC,EAFe,OAGEJ,mBAAS,8BAHX,mBAGrBK,EAHqB,KAGZC,EAHY,OAIAN,mBAAS,uBAJT,mBAIrBO,EAJqB,KAIbC,EAJa,KAiD5B,SAASC,EAAgBC,GACvB,IAAMC,EAAkBV,EAAaW,KAAI,SAAAC,GACvC,OAAOA,EAAKH,KAAOA,EAAZ,KACEG,EADF,CACQC,UAAWD,EAAKC,WADxB,KAEED,MAEXX,EAAgBS,GAGlB,OApDAI,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACyBC,MAAM,gCAAD,OAAiCd,IAD/D,UAE0B,OADlBe,EADR,QAEeC,OAFf,iCAGuBD,EAASE,OAHhC,OAGUC,EAHV,OAIIf,EAAW,IACXE,EAAUa,EAAKC,YALnB,wBAOId,EAAU,uBAPd,6CADc,uBAAC,WAAD,wBAWde,KACC,CAACpB,IAEJY,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACyBC,MAAM,gCAAD,OACMd,EADN,WAD9B,UAK0B,OAJlBe,EADR,QAKeC,OALf,iCAMuBD,EAASE,OANhC,OAMUC,EANV,OAOIf,EAAW,IACXJ,EAAgBmB,GARpB,wBAUInB,EAAgB,IAChBI,EAAW,8BAXf,6CADc,sBAgBD,KAATH,EAhBW,WAAD,wBAiBZqB,IAEAlB,EAAW,8BACXJ,EAAgB,OAEjB,CAACC,IAEJY,qBAAU,WACR,IAAMU,EAAWxB,EAAayB,QAAO,SAAAb,GAAI,OAAIA,EAAKC,YAClDa,SAASC,MAAT,sBAA6BH,EAASI,OAAtC,gBACC,CAAC5B,IAYF,oCACE,kBAACb,EAAD,KACE,kBAACG,EAAD,KAAQY,EAAR,2BACA,kBAACX,EAAD,KACE,kBAACC,EAAD,CACEqC,SAAU,SAAAC,GACR3B,EAAQ2B,EAAEC,OAAOC,QAEnBC,YAAY,qBAEd,kBAACvC,EAAD,CAAOwC,IAAK5B,KAGd,kBAACV,EAAD,KACE,4BACGI,EAAa4B,QAAU,EACtB,2BAAIxB,GAEJJ,EAAaW,KAAI,SAAAC,GAAI,OACnB,wBAAIuB,IAAKvB,EAAKH,IACZ,uBAAG2B,KAAMxB,EAAKyB,UAAWzB,EAAK0B,MAC7B1B,EAAKC,SACJ,0BACE0B,KAAK,MACLC,aAAW,WACXC,QAAS,kBAAMjC,EAAgBI,EAAKH,KACpCiC,MAAO,CAAEC,OAAQ,YAEhB,IANH,eAOK,KAGL,0BACEJ,KAAK,MACLC,aAAW,eACXC,QAAS,kBAAMjC,EAAgBI,EAAKH,KACpCiC,MAAO,CAAEC,OAAQ,YAEhB,IANH,SAOI,eD/FpB,MACA,kBAAC1D,EAAD,OAGFyC,SAASkB,eAAe,W","file":"static/js/main.a43d5f17.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html, body {\r\n        box-sizing: border-box;\r\n        background-color: rgb(40, 40, 40);\r\n        height: 100%;\r\n        font-family: 'Roboto';\r\n        font-size: 1.3em;\r\n        color: white;\r\n    }\r\n    ul {\r\n      list-style: none;\r\n    }\r\n    *{\r\n      margin: 0px;\r\n      padding: 0px;\r\n    }\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  height: 100vh;\r\n  display: grid;\r\n  grid-template-columns: repeat(12, 1fr);\r\n  grid-template-rows: 10vh 10vh 1fr;\r\n`;\r\n\r\nexport const Title = styled.div`\r\n  grid-column: 1 / -1;\r\n  grid-row: 1;\r\n\r\n  justify-self: center;\r\n  align-self: center;\r\n\r\n  font-size: 1.8em;\r\n\r\n  @media only screen and (max-width: 600px) {\r\n    font-size: 0.8em;\r\n  }\r\n`;\r\n\r\nexport const SearchBox = styled.div`\r\n  grid-column: 1 / -1;\r\n  grid-row: 2;\r\n  justify-self: center;\r\n  align-items: center\r\n  \r\n  display: flex;\r\n  \r\n`;\r\n\r\nexport const Input = styled.input`\r\n  font-weight: 600;\r\n  width: 200px;\r\n  height: 40px;\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  width: 60px;\r\n  height: 60px;\r\n  border-radius: 50%;\r\n`;\r\n\r\nexport const List = styled.div`\r\n  margin-top: 30px;\r\n  grid-row: 3;\r\n  grid-column: 1 / -1;\r\n  justify-self: center;\r\n\r\n  li {\r\n    margin: 6px;\r\n  }\r\n\r\n  a {\r\n    text-decoration: none;\r\n    color: white;\r\n  }\r\n\r\n  @media only screen and (max-width: 600px) {\r\n    font-size: 0.6em;\r\n  }\r\n`;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { GlobalStyle } from \"./styles\";\n\nReactDOM.render(\n  <>\n    <App />\n    <GlobalStyle />\n  </>,\n\n  document.getElementById(\"root\")\n);\n","import React, { useState, useEffect } from \"react\";\n\nimport { Container, SearchBox, Title, Input, List, Image } from \"./styles\";\n\nexport default function App() {\n  const [repositories, setRepositories] = useState([]);\n  const [user, setUser] = useState(\"\");\n  const [message, setMessage] = useState(\"Fill with a valid username\");\n  const [avatar, setAvatar] = useState(\"./assets/avatar.jpg\");\n\n  useEffect(() => {\n    async function getAvatar() {\n      const response = await fetch(`https://api.github.com/users/${user}`);\n      if (response.status === 200) {\n        const data = await response.json();\n        setMessage(\"\");\n        setAvatar(data.avatar_url);\n      } else {\n        setAvatar(\"./assets/avatar.jpg\");\n      }\n    }\n    getAvatar();\n  }, [user]);\n\n  useEffect(() => {\n    async function getRepositories() {\n      const response = await fetch(\n        `https://api.github.com/users/${user}/repos`\n      );\n\n      if (response.status === 200) {\n        const data = await response.json();\n        setMessage(\"\");\n        setRepositories(data);\n      } else {\n        setRepositories([]);\n        setMessage(\"Fill with a valid username\");\n      }\n    }\n\n    if (user !== \"\") {\n      getRepositories();\n    } else {\n      setMessage(\"Fill with a valid username\");\n      setRepositories([]);\n    }\n  }, [user]);\n\n  useEffect(() => {\n    const filtered = repositories.filter(repo => repo.favorite);\n    document.title = `Voc√™ tem ${filtered.length} favoritos`;\n  }, [repositories]);\n\n  function handleFavorites(id) {\n    const newRepositories = repositories.map(repo => {\n      return repo.id === id\n        ? { ...repo, favorite: !repo.favorite }\n        : { ...repo };\n    });\n    setRepositories(newRepositories);\n  }\n\n  return (\n    <>\n      <Container>\n        <Title>{user} github repository list</Title>\n        <SearchBox>\n          <Input\n            onChange={e => {\n              setUser(e.target.value);\n            }}\n            placeholder=\"Type a user name\"\n          />\n          <Image src={avatar} />\n        </SearchBox>\n\n        <List>\n          <ul>\n            {repositories.length <= 0 ? (\n              <p>{message}</p>\n            ) : (\n              repositories.map(repo => (\n                <li key={repo.id}>\n                  <a href={repo.html_url}>{repo.name}</a>\n                  {repo.favorite ? (\n                    <span\n                      role=\"img\"\n                      aria-label=\"favorite\"\n                      onClick={() => handleFavorites(repo.id)}\n                      style={{ cursor: \"pointer\" }}\n                    >\n                      {\" \"}\n                      üåü{\" \"}\n                    </span>\n                  ) : (\n                    <span\n                      role=\"img\"\n                      aria-label=\"shining-star\"\n                      onClick={() => handleFavorites(repo.id)}\n                      style={{ cursor: \"pointer\" }}\n                    >\n                      {\" \"}\n                      ‚≠ê{\" \"}\n                    </span>\n                  )}\n                </li>\n              ))\n            )}\n          </ul>\n        </List>\n      </Container>\n    </>\n  );\n}\n"],"sourceRoot":""}